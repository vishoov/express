
Full stack
front end - react 
backend - server node 

Backend -> API Design

create a live server 
localhost:3000
locally on      port number  
my system (host)
http protocol -> IP address 


ROUTING IN EXPRESS JS

EXPRESS JS IS A TECHNOLOGY FOR DESIGNING API'S 
EXPRESS HELPS IN MAKING APIS SCALABLE AND SECURE 


localhost:3000/home
localhost:3000/signup 
localhost:3000/login



Node Js environment 


1. npm init -y -> initialises the node package manager (npm)



EXPRESS.Js

1. npm install express 



chat gpt -> app that uses chat gpt 



to implement index.js 
we do 
node index.js

to implent this as a node js project 
-> npm run dev or npm run start


npm install nodemon  -> nodemon is a technology that helps us in automatically saving
changes to our server and restarting whenever needed


HTTP Communication

get -> recieve on server -> server handles it -> it responds 


JSON Format
header:{
    technical specification 
}
body:{
    details
}


route-> objects -> request header, 


benefits of express

we can treat request and response as objects
then we have their methods, to interact with them 


// npm -> node package manager
//npm run -> run the script
//npm run dev -> run the dev script


middlewares
MVC Architecture
API-> RESTFUL API

databases


RESTFUL -> REPRESENTATIONAL STATE TRANSFER 

scalable, reliable, secure, fast 

100 -> >1000-10000 -> crash 



Middlewares are functions that are implemented before any route is handled
after recieving the request


req-> middleware-> handler functions

1. app.use(middleware) ->  routes written after this app.use would by default implement this middleware
2. const middleware = (req, res, next)=>{} 
app.method("/route", middleware, callback handler)


Pre Built
    -> app.use(express.json()) -> to parse json files
    -> urlencoded -> url encoding support
    -> package specific -> jwt, cors security

Custom ->
    - logging -> printing the details of the req that the server has received
    - security/authentication -> secures the routes -> protected routes


HOW EXACTLY TO STRUCTURE OUR APPLICATION


javascript -> interpretor based -> line by line -> until there is no more code or error

100 features -> AI, analytics, prediction, storage, db, authentication

100 features' code -> run 



writing all code inside index.js ->
would slow our server
it will have to render or run all the code even if it is not being used

this does not look professional 

readable, understandable 


efficient -> code on demand 

scalable

secure

reliable

MVC Architecture

Model -> data format -> signup -> name, age, phone, address, height, weight, role, username 
View -> routes  
Controller -> handler functions 
